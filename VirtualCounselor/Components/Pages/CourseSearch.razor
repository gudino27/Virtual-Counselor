@page "/search-results"
@inject CentralBackend Backend
@inject IJSRuntime JSRuntime

<div class="container">
    <h3>Course Search</h3>
    <div class="search-box">
        <input @bind="searchTerm"
               placeholder="Enter course name, prefix, or keyword..." />
        <button class="btn btn-primary" @onclick="PerformSearch" disabled="@isSearching">Search</button>
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="DebugSearch">Debug Search ("121")</button>
    </div>

    <div class="mt-3">
        <p><strong>Debug Info:</strong> Search Term: "@searchTerm", Has Searched: @hasSearched, Is Searching: @isSearching, Results Count: @searchResults.Count</p>
    </div>

    @if (hasSearched)
    {
        <div class="search-results">
            <h4>Search Results for "@searchTerm"</h4>
            @if (isSearching)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else if (searchResults.Count == 0)
            {
                <p>No courses found matching your search.</p>
            }
            else
            {
                <ul class="list-unstyled">
                    @foreach (var course in searchResults)
                    {
                        <li class="course-item">
                            <strong>@course.CourseCode</strong> - @course.Title
                            <small class="text-muted">(@course.Credits credits)</small>
                        </li>
                    }
                </ul>
            }
        </div>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private bool hasSearched = false;
    private bool isSearching = false;
    private List<Course> searchResults = new();
    private bool isFirstRender = true;

    // Remove OnInitializedAsync and move JS calls to OnAfterRenderAsync
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // It's now safe to invoke JavaScript
            await JSRuntime.InvokeVoidAsync("console.log", "CourseSearch component initialized");
        }
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            hasSearched = false;
            searchResults.Clear();
            StateHasChanged();
            return;
        }

        isSearching = true;
        hasSearched = true;
        StateHasChanged();

        try
        {
            // Force search results for debugging - can remove this when system works
            if (searchTerm == "121")
            {
                searchResults = new List<Course>
                {
                    new Course { CourseCode = "CS 121", Title = "Intro to Programming", Credits = 4 },
                    new Course { CourseCode = "HIST 105", Title = "World History", Credits = 3 }
                };

                // Only log to console after the component has rendered
                await Task.Delay(10); // Small delay to ensure we're not in prerendering
                await JSRuntime.InvokeVoidAsync("console.log", "Forcing hardcoded results for '121'");
            }
            else
            {
                searchResults = Backend.SearchCourses(searchTerm);

                // Only log to console after the component has rendered
                await Task.Delay(10);
                await JSRuntime.InvokeVoidAsync("console.log", "Called Backend.SearchCourses");
            }

            // Log results after ensuring we're not in prerendering
            await Task.Delay(10);
            await JSRuntime.InvokeVoidAsync("console.log", $"Found {searchResults.Count} results");
            foreach (var course in searchResults)
            {
                await JSRuntime.InvokeVoidAsync("console.log", $"Course: {course.CourseCode} - {course.Title}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during search: {ex.Message}");
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private async Task DebugSearch()
    {
        searchTerm = "121";
        StateHasChanged();
        await PerformSearch();
    }
}
