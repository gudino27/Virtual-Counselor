@inject DegreeService DegreeService

@using VirtualCounselor.Backend

<input class="form-control"
placeholder="Search degrees…"
value="@searchTerm"
@oninput="OnInput" />

@if (isLoading)
{
    <div>Loading...</div>
}
else if (filteredDegrees.Any())
{
    <ul class="list-group position-absolute" style="z-index:1000; width:100%;">
        @foreach (var d in filteredDegrees)
        {
            <li class="list-group-item list-group-item-action"
                @onclick="() => Pick(d)">
                @d.Name
            </li>
        }
    </ul>
}

@code {
    private string searchTerm = "";
    private List<Degree> allDegrees = new();
    private List<Degree> filteredDegrees = new();
    private List<Degree> degrees = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        // Load all degrees asynchronously
        await Task.Run(() =>
        {
            allDegrees = DegreeManager.GetDegreeList();
            degrees = DegreeService.GetAllMajors();
        });

        Console.WriteLine($"Degrees loaded in UI: {degrees.Count}");
        isLoading = false;
    }

    private void OnInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        if (string.IsNullOrWhiteSpace(searchTerm))
            filteredDegrees.Clear();
        else
            filteredDegrees = allDegrees
              .Where(d => d.Name
                           .Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
              .ToList();
    }

    private void Pick(Degree d)
    {
        OnDegreePicked.InvokeAsync(d);
        searchTerm = "";
        filteredDegrees.Clear();
    }

    [Parameter] public EventCallback<Degree> OnDegreePicked { get; set; }
}
