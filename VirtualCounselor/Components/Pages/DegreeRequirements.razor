@inject SmartSearch SmartSearchInstance

@page "/DegreeRequirements"
@using VirtualCounselor.Backend
@rendermode InteractiveServer

<h1>Degree Requirements</h1>

<label>Choose Major:</label>
<DegreeSearch OnDegreePicked="LoadMajor" />

<p><strong>Major:</strong> @currentMajorName</p>
@foreach (var (course, taken) in majorCourses)
{
  <DegreeRequirementsIndividualCourse
      CourseName="@(course.CourseCode)"
      Taken="taken"
      Credits="@(course.Credits)" />
}

<!-- Smart Search for Major -->
@if (!string.IsNullOrWhiteSpace(currentMajorName) && currentMajorName != "(none)")
{
    <hr />
    <label>Search Courses for Major:</label>
        < input class="form-control mb-2"
          placeholder="Search courses..."
          value="@majorSearchQuery"
          @oninput="OnMajorSearchInput" />
    @if (majorSearchResults.Any())
    {
        <ul class="list-group">
            @foreach (var course in majorSearchResults)
            {
                <li class="list-group-item">
                    <strong>@course.CourseCode</strong> - @course.Title (@course.Credits credits)
                </li>
            }
        </ul>
    }
}

<hr />

<label>Choose Minor:</label>
<DegreeSearch OnDegreePicked="LoadMinor" />

<p><strong>Minor:</strong> @currentMinorName</p>
@foreach (var (course, taken) in minorCourses)
{
  <DegreeRequirementsIndividualCourse
      CourseName="@(course.CourseCode)"
      Taken="taken"
      Credits="@(course.Credits)" />
}

<!-- Smart Search for Minor -->
@if (!string.IsNullOrWhiteSpace(currentMinorName) && currentMinorName != "(none)")
{
    <hr />
    <label>Search Courses for Minor:</label>
       < input class="form-control mb-2"
           placeholder="Search courses..."
           value="@minorSearchQuery"
           @oninput="OnMinorSearchInput" />
    @if (minorSearchResults.Any())
    {
        <ul class="list-group">
            @foreach (var course in minorSearchResults)
            {
                <li class="list-group-item">
                    <strong>@course.CourseCode</strong> - @course.Title (@course.Credits credits)
                </li>
            }
        </ul>
    }
}

@code {
  private string currentMajorName = "(none)";
  private List<(Course course, bool taken)> majorCourses = new();
  private string currentMinorName = "(none)";
  private List<(Course course, bool taken)> minorCourses = new();

    private string majorSearchQuery = "";
    private List<Course> majorSearchResults = new();

    private string minorSearchQuery = "";
    private List<Course> minorSearchResults = new();

  private void LoadMajor(Degree d)
  {
    currentMajorName = d.Name;
    majorCourses     = d.GetRequiredCourses();
    // majorSearchQuery = "";
    // majorSearchResults.Clear();
  }

  private void LoadMinor(Degree d)
  {
    currentMinorName = d.Name;
    minorCourses     = d.GetRequiredCourses();
    // minorSearchQuery = "";
    // minorSearchResults.Clear();
  }

    private void OnMajorSearchInput(ChangeEventArgs e)
    {
        majorSearchQuery = e.Value?.ToString() ?? "";
        if (!string.IsNullOrWhiteSpace(majorSearchQuery))
            majorSearchResults = SmartSearchInstance.SearchCourses(majorSearchQuery);
        else
            majorSearchResults.Clear();
    }

    private void OnMinorSearchInput(ChangeEventArgs e)
    {
        minorSearchQuery = e.Value?.ToString() ?? "";
        if (!string.IsNullOrWhiteSpace(minorSearchQuery))
            minorSearchResults = SmartSearchInstance.SearchCourses(minorSearchQuery);
        else
            minorSearchResults.Clear();
    }
}
